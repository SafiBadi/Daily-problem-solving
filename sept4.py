class Solution:
    def floydWarshall(self,graph,V):   
        dist = list(map(lambda i: list(map(lambda j: j, i)), graph))
    
        for k in range(V):
            for i in range(V):
                for j in range(V):
                    dist[i][j] = min( dist[i][j], dist[i][k] + dist[k][j] )
        return dist
    
    def sumOfDistancesInTree(self, n: int, edges: list[list[int]]) -> list[int]:
        INF = 31000
        V = n
        record = [[INF for i in range(n)] for i in range(n)]

        for i in edges:
            record[i[0]][i[1]] = 1
            record[i[1]][i[0]] = 1
        for i in range(n):
            record[i][i] = 0
        
        floyed = self.floydWarshall(record,V)

        ans = list()
        for i in floyed:
            ans.append(sum(i))
        
        return ans

    


aa = Solution()
n = 2
lst = [[1,0]]
ans = aa.sumOfDistancesInTree(n,lst)
print(ans)

'''
50
Test: [[46,10],[0,8],[26,29],[16,26],[26,37],[45,25],[43,19],[38,33],[28,24],[30,21],[0,15],[27,41],[27,36],[31,26],[43,34],[25,49],[23,47],[25,26],[27,0],[32,10],[33,12],[1,8],[9,42],[19,36],[6,33],[5,20],[33,18],[3,29],[30,9],[21,36],[26,8],[33,47],[21,5],[36,13],[10,48],[47,39],[11,26],[17,44],[21,17],[47,36],[4,21],[14,31],[19,40],[15,35],[43,28],[6,22],[27,10],[20,7],[2,21]]
expected: [179,251,231,325,231,227,271,321,203,273,203,279,273,203,325,225,279,229,273,193,273,183,319,235,329,275,231,161,281,277,227,277,251,225,283,273,155,279,273,235,241,209,321,235,277,323,251,187,251,323]

200
TLE: [[112,91],[158,18],[183,96],[179,69],[183,157],[170,154],[173,162],[24,102],[140,100],[80,115],[87,154],[79,174],[46,115],[30,194],[129,9],[101,82],[170,26],[33,123],[172,124],[2,8],[148,149],[16,98],[174,48],[128,76],[175,87],[16,127],[171,124],[20,69],[128,159],[198,192],[99,63],[151,79],[194,155],[53,26],[2,133],[56,70],[154,191],[78,38],[137,70],[116,135],[69,176],[127,9],[14,1],[169,56],[187,125],[67,20],[59,33],[24,69],[89,126],[168,174],[110,194],[39,81],[58,191],[188,8],[51,166],[167,96],[23,96],[58,131],[122,20],[33,42],[25,0],[47,33],[37,132],[166,195],[57,131],[131,79],[78,92],[7,147],[62,68],[120,113],[172,80],[177,83],[154,197],[11,106],[79,147],[60,131],[161,85],[18,95],[152,80],[93,186],[145,175],[196,41],[39,27],[57,165],[150,29],[118,97],[51,56],[22,84],[161,32],[175,182],[171,45],[156,81],[113,162],[187,65],[32,153],[12,51],[163,54],[147,143],[142,9],[26,141],[163,33],[51,0],[172,91],[174,185],[131,113],[100,17],[51,50],[94,160],[44,111],[154,187],[170,157],[6,165],[72,52],[196,71],[134,100],[121,1],[61,146],[101,118],[126,166],[3,46],[87,80],[14,154],[178,39],[32,117],[40,61],[191,107],[98,119],[19,174],[67,74],[169,130],[105,39],[17,87],[56,64],[57,101],[135,150],[83,164],[34,197],[38,81],[87,128],[31,33],[21,69],[28,0],[12,88],[172,103],[51,114],[151,49],[73,4],[62,162],[56,139],[71,166],[72,3],[33,56],[136,129],[106,124],[84,13],[37,99],[56,66],[166,69],[109,90],[4,113],[46,36],[111,22],[127,160],[43,67],[80,198],[20,189],[37,127],[32,166],[87,29],[14,9],[86,131],[79,8],[5,16],[186,91],[144,191],[190,86],[179,180],[30,57],[177,51],[6,181],[10,170],[38,29],[55,138],[104,4],[55,172],[154,61],[95,136],[193,65],[22,90],[35,137],[199,161],[22,174],[46,184],[99,108],[75,65],[56,149],[58,51],[77,79],[15,106]]

class Solution(object):
    def sumOfDistancesInTree(self, N, edges):
        graph = collections.defaultdict(set)
        for u, v in edges:
            graph[u].add(v)
            graph[v].add(u)

        count = [1] * N
        ans = [0] * N
        def dfs(node = 0, parent = None):
            for child in graph[node]:
                if child != parent:
                    dfs(child, node)
                    count[node] += count[child]
                    ans[node] += ans[child] + count[child]

        def dfs2(node = 0, parent = None):
            for child in graph[node]:
                if child != parent:
                    ans[child] = ans[node] - count[child] + N - count[child]
                    dfs2(child, node)

        dfs()
        dfs2()
        return ans
'''